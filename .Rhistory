select(c(Validation, Bulan, LT.QA)) %>%
group_by(Bulan) %>%
summarise(mean.LTP = mean(LT.QA)) %>%
arrange(desc(mean.LTP)) %>%
ungroup()
d
e <- PL4_RF %>%
filter(Validation=="NV") %>%
select(c(Validation, Bulan, LT.Line4)) %>%
group_by(Bulan) %>%
summarise(mean.LT.Line4 = mean(LT.Line4)) %>%
mutate(label = glue("Bulan: {Bulan}
PCT Line 4: {mean.LT.Line4} days"))
plot1 <- e %>%
ggplot(aes(x = Bulan,
y = mean.LT.Line4,
text = label)) +
geom_col(fill="green")+
theme_minimal() +
geom_hline(yintercept = 16)+
theme(legend.position = "none") +
labs(title = "Plant Cycle Time Line 4",
x = 'Bulan',
y = 'Plant Cycle Time')
ggplotly(plot1, tooltip = "text")
ea <- PL4_RF %>%
filter(Validation=="NV") %>%
select(c(Validation, Bulan, LT.Line4)) %>%
group_by(Bulan) %>%
mutate(label = glue("Bulan: {Bulan}
PCT Line 4: {LT.Line4} days"))
plot12 <- ggplot(data = ea, mapping = aes(x = Bulan, y = LT.Line4, text=label)) +
geom_boxplot()+
geom_jitter()+
theme_minimal()+
labs(title = "Sebaran PCT Line 4",
x = NULL,
y = "Lead Time")
ggplotly(plot12, tooltip = "text")
f <- PL4_RF %>%
filter(Validation=="NV") %>%
select (c(Validation, Bulan, LT.Produksi)) %>%
group_by(Bulan) %>%
summarise(mean.LT.Produksi = mean(LT.Produksi)) %>%
mutate(label = glue("Bulan: {Bulan}
LT.Produksi: {mean.LT.Produksi} days"))
plot2 <- f %>%
ggplot(aes(x = Bulan,
y = mean.LT.Produksi)) +
geom_line(aes(group=1), color = "red") +
geom_point(aes(text = label)) +
scale_y_continuous(labels = scales::comma) +
labs(title = "Lead Time Production",
x = NULL,
y = "Lead Time") +
theme_minimal()
ggplotly(plot2, tooltip = "text")
g <- PL4_RF %>%
filter(Validation=="NV") %>%
select(c(Validation, BN, LT.Produksi)) %>%
tail(10) %>%
mutate(label = glue("Batch No.: {BN}
LT.Produksi: {LT.Produksi} days"))
plot3 <- g %>%
ggplot(aes(x = BN,
y = LT.Produksi)) +
geom_line(aes(group=1), color = "red") +
geom_hline(yintercept = 2)+
geom_point(aes(text = label)) +
scale_y_continuous(labels = scales::comma) +
labs(title = "Lead Time Production per BN",
x = NULL,
y = "Lead Time") +
theme_minimal()
ggplotly(plot3, tooltip = "text")
h <- PL4_RF %>%
filter(Validation=="NV") %>%
select(c(Validation, BN, LT.QC)) %>%
tail(10) %>%
mutate(label = glue("Batch No.: {BN}
LT.QC: {LT.QC} days"))
plot4 <- h %>%
ggplot(aes(x = BN,
y = LT.QC)) +
geom_line(aes(group=1), color = "red") +
geom_point(aes(text = label)) +
geom_hline(yintercept = 14)+
scale_y_continuous(labels = scales::comma) +
labs(title = "Lead Time QC per BN",
x = NULL,
y = "Lead Time") +
theme_minimal()
ggplotly(plot4, tooltip = "text")
i <- PL4_RF %>%
filter(Validation=="NV") %>%
select(c(Validation, BN, LT.QA)) %>%
tail(10) %>%
mutate(label = glue("Batch No.: {BN}
LT.QA: {LT.QA} days"))
plot5 <- i %>%
ggplot(aes(x = BN,
y = LT.QA)) +
geom_line(aes(group=1), color = "red") +
geom_point(aes(text = label)) +
geom_hline(yintercept = 0.1)+
scale_y_continuous(labels = scales::comma) +
labs(title = "Lead Time QA per BN",
x = NULL,
y = "Lead Time") +
theme_minimal()
ggplotly(plot5, tooltip = "text")
runApp()
runApp()
luidRow(
box(
width = 12,
selectInput(
inputId = "input_category",
label = "Choose Month",
choices = levels(PL4_RF$Bulan)
)
)
)
fluidRow(
box(
width = 12,
selectInput(
inputId = "input_category",
label = "Choose Month",
choices = levels(PL4_RF$Bulan)
)
)
)
choices = levels(PL4_RF$Bulan)
inputId = "input_category"
runApp()
a <- PL4_RF %>%
filter(Bulan==input$input_category) %>%
group_by(Bulan) %>%
summarise(count = n()) %>%
arrange(desc(count)) %>%
ungroup()
PL4_RF
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
table
output$table <- renderDataTable({
DT::datatable(PL4_R,
#argumen/parameter agar dataframe dapat discroll
options = list(scrollX = TRUE))
})
runApp()
dashboardSidebar(
sidebarMenu(
#tabName digunakan untuk ID tiap menuItem. disambungkan ke tabItem pada dashboardBody()
menuItem("Plant Cycle Time FIMA", tabName = "Plant Cycle Time FIMA", icon = icon("fa-solid fa-user-doctor")),
menuItem("Plant Cycle Time Line 1", tabName = "Plant Cycle Time Line 1", icon = icon("fa-brands fa-github-square")),
menuItem("Plant Cycle Time Line 2", tabName = "Plant Cycle Time Line 2", icon = icon("fa-brands fa-github-square")),
menuItem("Plant Cycle Time Line 4", tabName = "Plant Cycle Time Line 4", icon = icon("fa-brands fa-github-square")),
menuItem("Data", tabName = "data", icon = icon("table"))
)
fluidRow(
fluidRow(
# fungsi box tidak diberikan argumen title karena mengikuti title dari server
box(
width = 6,
title = "Plant Cycle Time Line 4",
plotlyOutput(outputId = "pointplot")
)
tabItem(
tabItem(
tabName = "data",
DT::dataTableOutput(outputId = "table")
box(
box(
width = 4,
title = "Daily Lead Time QA",
plotlyOutput(outputId = "lineplot3")
)
box(
width = 4,
title = "Daily Lead Time QC",
plotlyOutput(outputId = "lineplot2")
)
box(
width = 4,
title = "Daily Lead Time Production",
plotlyOutput(outputId = "lineplot1")
)
box(
width = 6,
title = "Distribution PCT Line 4",
plotlyOutput(outputId = "boxplot")
)
box(
width = 6,
title = "Plant Cycle Time Line 4",
plotlyOutput(outputId = "pointplot")
)
fluidRow(
# fungsi box tidak diberikan argumen title karena mengikuti title dari server
box(
width = 6,
title = "Plant Cycle Time Line 4",
plotlyOutput(outputId = "pointplot")
),
box(
width = 6,
title = "Distribution PCT Line 4",
plotlyOutput(outputId = "boxplot")
),
box(
width = 4,
title = "Daily Lead Time Production",
plotlyOutput(outputId = "lineplot1")
),
box(
width = 4,
title = "Daily Lead Time QC",
plotlyOutput(outputId = "lineplot2")
),
box(
width = 4,
title = "Daily Lead Time QA",
plotlyOutput(outputId = "lineplot3")
)
)
),
fluidRow(
# fungsi box tidak diberikan argumen title karena mengikuti title dari server
box(
width = 6,
title = "Plant Cycle Time Line 4",
plotlyOutput(outputId = "pointplot")
),
box(
width = 6,
title = "Distribution PCT Line 4",
plotlyOutput(outputId = "boxplot")
),
box(
width = 4,
title = "Daily Lead Time Production",
plotlyOutput(outputId = "lineplot1")
),
box(
width = 4,
title = "Daily Lead Time QC",
plotlyOutput(outputId = "lineplot2")
),
box(
width = 4,
title = "Daily Lead Time QA",
plotlyOutput(outputId = "lineplot3")
)
)
tabItem(
tabName = "Plant Cycle Time Line 4",
# --------- INPUT
fluidRow(
box(
width = 12,
selectInput(
inputId = "input_category",
label = "Choose Month",
choices = levels(PL4_RF$Bulan)
)
)
),
#--------- INFO BOXES
fluidRow(
infoBox("BN release", a, icon = icon("fa-solid fa-building"), color = "red"),
infoBox("LT Production", b, icon = icon("fa-solid fa-people-line"), color = "black"),
infoBox("LT QC", c, icon = icon("fa-solid fa-sitemap"), color = "red"),
infoBox("LT QA", d, icon = icon("fa-solid fa-sitemap"), color = "red")
),
# --------- POINT PLOT
fluidRow(
# fungsi box tidak diberikan argumen title karena mengikuti title dari server
box(
width = 6,
title = "Plant Cycle Time Line 4",
plotlyOutput(outputId = "pointplot")
),
box(
width = 6,
title = "Distribution PCT Line 4",
plotlyOutput(outputId = "boxplot")
),
box(
width = 4,
title = "Daily Lead Time Production",
plotlyOutput(outputId = "lineplot1")
),
box(
width = 4,
title = "Daily Lead Time QC",
plotlyOutput(outputId = "lineplot2")
),
box(
width = 4,
title = "Daily Lead Time QA",
plotlyOutput(outputId = "lineplot3")
)
)
)
tabItem(
tabName = "data",
DT::dataTableOutput(outputId = "table")
)
abItem(
tabName = "Plant Cycle Time Line 4",
# --------- INPUT
fluidRow(
box(
width = 12,
selectInput(
inputId = "input_category",
label = "Choose Month",
choices = levels(PL4_RF$Bulan)
)
)
),
#--------- INFO BOXES
fluidRow(
infoBox("BN release", a, icon = icon("fa-solid fa-building"), color = "red"),
infoBox("LT Production", b, icon = icon("fa-solid fa-people-line"), color = "black"),
infoBox("LT QC", c, icon = icon("fa-solid fa-sitemap"), color = "red"),
infoBox("LT QA", d, icon = icon("fa-solid fa-sitemap"), color = "red")
),
# --------- POINT PLOT
fluidRow(
# fungsi box tidak diberikan argumen title karena mengikuti title dari server
box(
width = 6,
title = "Plant Cycle Time Line 4",
plotlyOutput(outputId = "pointplot")
),
box(
width = 6,
title = "Distribution PCT Line 4",
plotlyOutput(outputId = "boxplot")
),
box(
width = 4,
title = "Daily Lead Time Production",
plotlyOutput(outputId = "lineplot1")
),
box(
width = 4,
title = "Daily Lead Time QC",
plotlyOutput(outputId = "lineplot2")
),
box(
width = 4,
title = "Daily Lead Time QA",
plotlyOutput(outputId = "lineplot3")
)
)
)
tabItem(
tabName = "Plant Cycle Time Line 4",
# --------- INPUT
fluidRow(
box(
width = 12,
selectInput(
inputId = "input_category",
label = "Choose Month",
choices = levels(PL4_RF$Bulan)
)
)
),
#--------- INFO BOXES
fluidRow(
infoBox("BN release", a, icon = icon("fa-solid fa-building"), color = "red"),
infoBox("LT Production", b, icon = icon("fa-solid fa-people-line"), color = "black"),
infoBox("LT QC", c, icon = icon("fa-solid fa-sitemap"), color = "red"),
infoBox("LT QA", d, icon = icon("fa-solid fa-sitemap"), color = "red")
),
# --------- POINT PLOT
fluidRow(
# fungsi box tidak diberikan argumen title karena mengikuti title dari server
box(
width = 6,
title = "Plant Cycle Time Line 4",
plotlyOutput(outputId = "pointplot")
),
box(
width = 6,
title = "Distribution PCT Line 4",
plotlyOutput(outputId = "boxplot")
),
box(
width = 4,
title = "Daily Lead Time Production",
plotlyOutput(outputId = "lineplot1")
),
box(
width = 4,
title = "Daily Lead Time QC",
plotlyOutput(outputId = "lineplot2")
),
box(
width = 4,
title = "Daily Lead Time QA",
plotlyOutput(outputId = "lineplot3")
)
)
)
runApp()
tabItem(
tabName = "Plant Cycle Time Line 4",
# --------- INPUT
fluidRow(
box(
width = 12,
selectInput(
inputId = "input_category",
label = "Choose Month",
choices = levels(PL4_RF$Bulan)
)
)
),
#--------- INFO BOXES
fluidRow(
infoBox("BN release", a, icon = icon("fa-solid fa-building"), color = "red"),
infoBox("LT Production", b, icon = icon("fa-solid fa-people-line"), color = "black"),
infoBox("LT QC", c, icon = icon("fa-solid fa-sitemap"), color = "red"),
infoBox("LT QA", d, icon = icon("fa-solid fa-sitemap"), color = "red")
),
# --------- POINT PLOT
fluidRow(
# fungsi box tidak diberikan argumen title karena mengikuti title dari server
box(
width = 6,
title = "Plant Cycle Time Line 4",
plotlyOutput(outputId = "pointplot")
),
box(
width = 6,
title = "Distribution PCT Line 4",
plotlyOutput(outputId = "boxplot")
),
box(
width = 4,
title = "Daily Lead Time Production",
plotlyOutput(outputId = "lineplot1")
),
box(
width = 4,
title = "Daily Lead Time QC",
plotlyOutput(outputId = "lineplot2")
),
box(
width = 4,
title = "Daily Lead Time QA",
plotlyOutput(outputId = "lineplot3")
)
)
)
runApp()
runApp()
output$lineplot3 <- renderPlotly({
i <- PL4_RF %>%
filter(Bulan==input$input_category) %>%
select(c(Validation, BN, LT.QA)) %>%
tail(10) %>%
mutate(label = glue("Batch No.: {BN}
LT.QA: {LT.QA} days"))
plot5 <- i %>%
ggplot(aes(x = BN,
y = LT.QA)) +
geom_line(aes(group=1), color = "red") +
geom_point(aes(text = label)) +
geom_hline(yintercept = 0.1)+
scale_y_continuous(labels = scales::comma) +
labs(title = "Lead Time QA per BN",
x = NULL,
y = "Lead Time") +
theme_minimal()
ggplotly(plot5, tooltip = "text")
})
output$boxplot <- renderPlotly({
ea <- PL4_RF %>%
filter(Bulan==input$input_category) %>%
select(c(Validation, Bulan, LT.Line4)) %>%
group_by(Bulan) %>%
mutate(label = glue("Bulan: {Bulan}
PCT Line 4: {LT.Line4} days"))
plot12 <- ggplot(data = ea, mapping = aes(x = Bulan, y = LT.Line4, text=label)) +
geom_boxplot()+
geom_jitter()+
theme_minimal()+
labs(title = "Distribution PCT Line 4",
x = NULL,
y = "Lead Time")
ggplotly(plot12, tooltip = "text")
})
runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
